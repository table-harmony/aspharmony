@model CreateBookViewModel

@{
    ViewData["Title"] = "Create New Book";
}

<div class="card">
    <div class="card-header">
        <h2 class="mb-0">Create New Book</h2>
    </div>
    <div class="card-body">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="mb-3">
                <label asp-for="Title" class="form-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-book"></i></span>
                    <input asp-for="Title" class="form-control" />
                </div>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Description" class="form-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-file-text"></i></span>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                </div>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Image" class="form-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-image"></i></span>
                    <input asp-for="Image" class="form-control" type="file" accept="image/*" />
                </div>
                <span asp-validation-for="Image" class="text-danger"></span>
                <small class="text-muted">Maximum file size: 5MB. Supported formats: .jpg, .jpeg, .png</small>
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <input asp-for="GenerateImage" class="form-check-input" id="generateImage" />
                    <label asp-for="GenerateImage" class="form-check-label"><i class="bi bi-robot"></i> Generate cover image</label>
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="Server" class="control-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-server"></i></span>
                    <select asp-for="Server" asp-items="ViewBag.Servers" class="form-control"></select>
                </div>
                <span asp-validation-for="Server" class="text-danger"></span>
            </div>

            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Chapters</h4>
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-secondary" id="generateChapters">
                            <i class="bi bi-robot"></i> Generate
                        </button>
                        <button type="button" class="btn btn-success btn-sm" id="addChapter">
                            <i class="bi bi-plus-circle"></i> Add
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="chapters" class="row">
                        <!-- Chapters will be added here dynamically -->
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary">Create Book</button>
                <a asp-action="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            let chapterIndex = 0;

            function addChapter() {
                const template = `
                    <div class="col-md-4 mb-3 chapter-card" data-index="${chapterIndex}">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Chapter ${chapterIndex + 1}</h5>
                                <button type="button" class="btn btn-danger btn-sm delete-chapter">Delete</button>
                            </div>
                            <div class="card-body">
                                <input type="hidden" name="Chapters[${chapterIndex}].Index" value="${chapterIndex}" />
                                <div class="mb-2">
                                    <label class="form-label">Title</label>
                                    <input type="text" name="Chapters[${chapterIndex}].Title" class="form-control" required />
                                </div>
                                <div>
                                    <label class="form-label">Content</label>
                                    <textarea name="Chapters[${chapterIndex}].Content" class="form-control" rows="3" required></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                $('#chapters').append(template);
                chapterIndex++;
            }

            $('#addChapter').click(addChapter);

            $(document).on('click', '.delete-chapter', function () {
                $(this).closest('.chapter-card').remove();
                updateChapterNumbers();
            });

            function updateChapterNumbers() {
                $('.chapter-card').each(function (idx) {
                    const card = $(this);
                    card.attr('data-index', idx);
                    card.find('h5').text(`Chapter ${idx + 1}`);
                    card.find('input[type="hidden"]').val(idx).attr('name', `Chapters[${idx}].Index`);
                    card.find('input[type="text"]').attr('name', `Chapters[${idx}].Title`);
                    card.find('textarea').attr('name', `Chapters[${idx}].Content`);
                });
                chapterIndex = $('.chapter-card').length;
            }

            $('#generateImage').on('change', function() {
                const imageInput = $('input[type="file"]');
                if (this.checked) {
                    imageInput.value = '';
                    imageInput.attr('disabled', 'disabled');
                } else {
                    imageInput.removeAttr('disabled');
                }
            });

            $('#generateChapters').click(async function () {
                const title = $('#Title').val();
                const description = $('#Description').val();

                if (!title || !description) {
                    alert('Please enter both title and description first.');
                    return;
                }

                $('#add-chapter, .delete-chapter').prop('disabled', true);

                const button = $(this);
                const originalText = button.html();
                button.html('<i class="bi bi-hourglass-split"></i> Generating...').prop('disabled', true);

                try {
                    const token = $('input[name="__RequestVerificationToken"]').val();
                    if (!token) throw new Error('CSRF token not found');

                    const existingChapters = $('.chapter-card').map(function() {
                        return {
                            index: parseInt($(this).find('input[type="hidden"]').val()),
                            title: $(this).find('input[name$=".Title"]').val(),
                            content: $(this).find('textarea[name$=".Content"]').val()
                        };
                    }).get();

                    const response = await fetch('/Book/GenerateChapters', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token,
                        },
                        body: JSON.stringify({ 
                            title, 
                            description,
                            chapters: existingChapters 
                        }),
                    });

                    let data;
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        data = await response.json();
                    } else {
                        throw new Error('Invalid response format from server');
                    }
                    
                    if (!response.ok) {
                        throw new Error(data.error || 'Failed to generate chapters');
                    }

                    if (!Array.isArray(data)) {
                        throw new Error('Invalid response format: expected an array of chapters');
                    }

                    data.forEach((chapter) => {
                        addChapter();
                        const card = $(`.chapter-card[data-index="${chapter.index - 1}"]`);
                        card.find('input[name$=".Title"]').val(chapter.title);
                        card.find('textarea[name$=".Content"]').val(chapter.content);
                    });
                } catch (error) {
                    console.error('Error:', error);
                    alert(error.message || 'Failed to generate chapters. Please try again.');
                } finally {
                    button.html(originalText).prop('disabled', false);
                    $('#add-chapter, .delete-chapter').prop('disabled', false);
                }
            });
        });
    </script>
}

