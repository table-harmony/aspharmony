@model PresentationLayer.Models.EditBookViewModel

@using Utils

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h2 class="mb-0">Edit Book</h2>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline" data-bs-toggle="modal" data-bs-target="#translateModel">
                <i class="bi bi-translate"></i> Translate
            </button>
            <button type="button" class="btn btn-secondary" id="refineBook">
                <i class="bi bi-robot"></i> Refine
            </button>
        </div>
    </div>
    <div class="card-body">
        <form asp-action="Edit" asp-controller="Book" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            
            <div class="mb-3">
                <label asp-for="Title" class="form-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-book"></i></span>
                    <input asp-for="Title" class="form-control" />
                </div>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Description" class="form-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-file-text"></i></span>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                </div>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="NewImage" class="form-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-image"></i></span>
                    <input asp-for="NewImage" class="form-control" type="file" accept="image/*" />
                </div>
                <span asp-validation-for="NewImage" class="text-danger"></span>
                <small class="text-muted">Maximum file size: 5MB. Supported formats: .jpg, .jpeg, .png</small>
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <input asp-for="GenerateImage" class="form-check-input" id="generateImage" />
                    <label asp-for="GenerateImage" class="form-check-label"><i class="bi bi-robot"></i> Generate cover image</label>
                </div>
            </div>
            
            <div class="mb-3">
                <label asp-for="Server" class="control-label"></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-server"></i></span>
                    <select asp-for="Server" asp-items="ViewBag.Servers" class="form-control"></select>
                </div>
                <span asp-validation-for="Server" class="text-danger"></span>
            </div>

            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Chapters</h4>
                    <button type="button" class="btn btn-success btn-sm" id="addChapter">
                        <i class="bi bi-plus-circle"></i> Add
                    </button>
                </div>
                <div class="card-body">
                    <div id="chapters" class="row">
                        @foreach (var chapter in Model.Chapters) {
                            <div class="col-md-4 mb-3 chapter-card" data-index="@chapter.Index">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Chapter @(chapter.Index + 1)</h5>
                                        <button type="button" class="btn btn-danger btn-sm delete-chapter">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                    <div class="card-body">
                                        <input type="hidden" name="Chapters[@chapter.Index].Index" value="@chapter.Index" />
                                        <div class="form-group mb-4">
                                            <label class="control-label">Title</label>
                                            <input name="Chapters[@chapter.Index].Title" class="form-control" value="@chapter.Title" required />
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label">Content</label>
                                            <textarea name="Chapters[@chapter.Index].Content" class="form-control" rows="3" required>@chapter.Content</textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> Save Changes
                </button>
                <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary">
                    <i class="bi bi-x-circle"></i> Cancel
                </a>
            </div>
        </form>
    </div>
</div>

<div class="modal fade" id="translateModel" tabindex="-2">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Translate '@Model.Title'</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-4">
                    <label for="targetLanguage" class="form-label">Target Language</label>
                    <select class="form-select" id="targetLanguage">
                        <option value="">Original</option>
                        @foreach (var language in ViewBag.Languages) {
                            <option value="@language.Id">@language.Name</option>
                        }
                    </select>
                    <div class="form-text">Select a language to translate the book</div>
                </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <h6 class="mb-0"><i class="bi bi-file-text"></i> Original</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label fw-bold text-primary">
                                    <i class="bi bi-bookmark-star"></i> Title
                                </label>
                                <p class="form-control-plaintext pb-2" id="originalTitle">@Model.Title</p>
                            </div>
                            <div>
                                <label class="form-label fw-bold text-primary">
                                    <i class="bi bi-card-text"></i> Description
                                </label>
                                <p class="form-control-plaintext pb-2" id="originalDescription">@Model.Description</p>
                            </div>
                        </div>
                    </div>
                </div>

            <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <h6 class="mb-0"><i class="bi bi-translate"></i> Translation</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label fw-bold text-success">
                                    <i class="bi bi-bookmark-star"></i> Title
                                </label>
                                <p class="form-control-plaintext pb-2" id="translatedTitle">
                                    <span class="text-muted fst-italic">Select a language to see translation</span>
                                </p>
                            </div>
                            <div>
                                <label class="form-label fw-bold text-success">
                                    <i class="bi bi-card-text"></i> Description
                                </label>
                                <p class="form-control-plaintext pb-2" id="translatedDescription">
                                    <span class="text-muted fst-italic">Select a language to see translation</span>
                                </p>
                            </div>
                        </div>

                       </div>
            </div>
            </div>
        </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="translateBook">
                    <i class="bi bi-translate"></i> <span class="button-text">Translate</span>
                </button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {

            function addChapter() {
                const chapterHtml = `
                    <div class="col-md-4 mb-3 chapter-card" data-index="${chapterCount}">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Chapter ${chapterCount + 1}</h5>
                                <button type
            let chapterCount = @Model.Chapters.Count="button" class="btn btn-danger btn-sm delete-chapter">Delete</button>
                            </div>
                            <div class="card-body">
                                <input type="hidden" name="Chapters[${chapterCount}].Index" value="${chapterCount}" />
                                <div class="form-group mb-4">
                                    <label class="control-label">Title</label>
                                    <input name="Chapters[${chapterCount}].Title" class="form-control" required />
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Content</label>
                                    <textarea name="Chapters[${chapterCount}].Content" class="form-control" rows="3" required></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                $("#chapters").append(chapterHtml);
                chapterCount++;
                updateChapterIndexes();
            }

            $("#addChapter").click(function () {
               addChapter();
            });

            $(document).on('click', '.delete-chapter', function () {
                $(this).closest('.chapter-card').remove();
                chapterCount--;
                updateChapterIndexes();
            });

            function updateChapterIndexes() {
                $('.chapter-card').each(function (index) {
                    $(this).attr('data-index', index);
                    $(this).find('h5').text(`Chapter ${index + 1}`);
                    $(this).find('input[type="hidden"]').attr('name', `Chapters[${index}].Index`).val(index);
                    $(this).find('input[type="text"]').attr('name', `Chapters[${index}].Title`);
                    $(this).find('textarea').attr('name', `Chapters[${index}].Content`);
                });
            }

            $('#generateImage').on('change', function() {
                const imageInput = $('input[type="file"]');
                if (this.checked) {
                    imageInput.value = '';
                    imageInput.attr('disabled', 'disabled');
                } else {
                    imageInput.removeAttr('disabled');
                }
            });

            $("#translateBook").click(async function() {
                const translateModal = new bootstrap.Modal(document.getElementById("translateModel")); 

                const button = $(this);
                const originalText = button.html();
                button.html('<i class="bi bi-hourglass-split"></i> Translating...').prop('disabled', true);

                $('#addChapter, .delete-chapter').prop('disabled', true);

                const bookData = {
                    target_language: $("#targetLanguage").val(),
                    title: $('#Title').val(),
                    description: $('#Description').val(),
                    chapters: $('.chapter-card').map(function() {
                        return {
                            index: parseInt($(this).attr('data-index')),
                            title: $(this).find('input[name$=".Title"]').val(),
                            content: $(this).find('textarea[name$=".Content"]').val()
                        };
                    }).get()
                };

                try {
                    const response = await fetch('/Book/TranslateBook', {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify(bookData)
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        console.error('Server Error:', data);
                        throw new Error(data.error || 'Failed to translate book');
                    }

                    $('#Title').val(data.title);
                    $('#Description').val(data.description);

                    data.chapters.forEach((chapter) => {
                        const card = $(`.chapter-card[data-index="${chapter.index}"]`);
                        if (card.length) {
                            card.find('input[name$=".Title"]').val(chapter.title);
                            card.find('textarea[name$=".Content"]').val(chapter.content);
                        }
                    });

                    translateModal.hide();
                } catch (error) {
                    console.error('Error:', error);
                    alert(error.message || 'Failed to translate book. Please try again.');
                } finally {
                    button.html(originalText).prop('disabled', false);
                    $('#addChapter, .delete-chapter').prop('disabled', false);
                }
            });

            $('#targetLanguage').on('change', async function() {
                const select = $(this);
                select.prop('disabled', true);

                const button = $("#translateBook");
                const originalText = button.html();
                button.html('<i class="bi bi-hourglass-split"></i> Translating...').prop('disabled', true);

                const bookData = {
                    target_language: $("#targetLanguage").val(),
                    title: $('#Title').val(),
                    description: $('#Description').val(),
                };

                try {
                    const response = await fetch('/Book/PreviewTranslation', {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify(bookData)
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        console.error('Server Error:', data);
                        throw new Error(data.error || 'Failed to translate book');
                    }

                    $('#translatedTitle').text(data.title);
                    $('#translatedDescription').text(data.description);
                } catch (error) {
                    $('#translatedTitle').text('-');
                    $('#translatedDescription').text('-');
                } finally {
                    button.html(originalText).prop('disabled', false);
                    select.prop('disabled', false);
                }
            });

            $('#refineBook').click(async function() {
                const button = $(this);
                const originalText = button.html();
                button.html('<i class="bi bi-hourglass-split"></i> Refining...').prop('disabled', true);

                $('#addChapter, .delete-chapter').prop('disabled', true);

                const bookData = {
                    title: $('#Title').val(),
                    description: $('#Description').val(),
                    chapters: $('.chapter-card').map(function() {
                        return {
                            index: parseInt($(this).attr('data-index')),
                            title: $(this).find('input[name$=".Title"]').val(),
                            content: $(this).find('textarea[name$=".Content"]').val()
                        };
                    }).get()
                };

                try {
                    const response = await fetch('/Book/RefineBook', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify(bookData)
                    });

                    const data = await response.json();
                    
                    if (!response.ok) {
                        console.error('Server Error:', data);
                        throw new Error(data.error || 'Failed to refine book');
                    }
                    
                    $('#Title').val(data.title);
                    $('#Description').val(data.description);
                    
                    data.chapters.forEach((chapter) => {
                        const card = $(`.chapter-card[data-index="${chapter.index}"]`);
                        if (card.length) {
                            card.find('input[name$=".Title"]').val(chapter.title);
                            card.find('textarea[name$=".Content"]').val(chapter.content);
                        }
                    });
                } catch (error) {
                    console.error('Error:', error);
                    alert(error.message || 'Failed to refine book. Please try again.');
                } finally {
                    button.html(originalText).prop('disabled', false);
                    $('#addChapter, .delete-chapter').prop('disabled', false);
                }
            });
        });
    </script>
}