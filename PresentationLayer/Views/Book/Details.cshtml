@model BusinessLogicLayer.Services.Book
@using Utils

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index">Books</a></li>
        <li class="breadcrumb-item active">@(Model.Metadata?.Title ?? "Unknown") Details</li>
    </ol>
</nav>

<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <h2 class="card-title mb-4">@Model.Metadata?.Title</h2>
                <div class="mt-3">
                    <p><strong>Author:</strong> @(Model.Author?.UserName ?? "Unknown")</p>
                    <p><strong>Description:</strong> @Model.Metadata?.Description</p>
                    <p><strong>Total Chapters:</strong> @(Model.Metadata?.Chapters?.Count ?? 0)</p>
                </div>
                
                <div class="mt-4">
                    @{
                        string userId = User.FindFirstValue(ClaimTypes.NameIdentifier)!;
                        if (Model.AuthorId == userId) {
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                                <i class="bi bi-trash"></i> Delete
                            </a>
                        }
                    }
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#voiceSelectionModal">
                        <i class="bi bi-file-earmark-music"></i> Audio Book
                    </button>
                </div>
            </div>
            <div class="col-md-4">
                <img src="@Model.Metadata?.ImageUrl" alt="@Model.Metadata?.Title" class="img-fluid rounded" style="max-height: 300px; width: 100%; object-fit: contain;" />
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="voiceSelectionModal" tabindex="-1" aria-labelledby="voiceSelectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="voiceSelectionModalLabel">Generate Audio book for '@Model.Metadata.Title'</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3" id="voicesContainer">
                    @foreach (var voice in ViewBag.Voices) {
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="form-check mb-3">
                                        <input class="form-check-input voice-select" type="radio"
                                               name="voiceId" value="@voice.VoiceId"
                                               id="voice_@voice.VoiceId" @(voice == ViewBag.Voices[0] ? "checked" : "")>
                                        <label class="form-check-label fw-bold" for="voice_@voice.VoiceId">
                                            @voice.Name
                                        </label>
                                    </div>
                                    <ul class="list-unstyled mb-3">
                                        @if (voice.Labels != null) {
                                            @foreach (var label in voice.Labels) {
                                                <li class="badge badge-pill bg-secondary">
                                                    @label.Value
                                                </li>
                                            }
                                        } else {
                                            <li>No labels available.</li>
                                        }
                                    </ul>
                                    <button class="btn btn-sm btn-outline-secondary preview-voice"
                                            data-preview-url="@voice.PreviewUrl">
                                        <i class="bi bi-play-circle"></i> Preview
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="generateAudioBook">
                    <i class="bi bi-play-circle"></i> Generate
                </button>
            </div>
        </div>
    </div>
</div>

@if (Model.Metadata?.Chapters != null && Model.Metadata.Chapters.Any()) {
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Book Content</h3>
        </div>
        <div class="card-body">
            <div class="accordion" id="chaptersAccordion">
                @foreach (var chapter in Model.Metadata.Chapters.OrderBy(c => c.Index)) {
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                                    data-bs-target="#chapter@(chapter.Index)">
                                @chapter.Title
                            </button>
                        </h2>
                        <div id="chapter@(chapter.Index)" class="accordion-collapse collapse" data-bs-parent="#chaptersAccordion">
                            <div class="accordion-body">
                                <p class="mb-0">@chapter.Content</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
} else {
    <div class="alert alert-info">
        <p class="mb-0">No chapters available for this book.</p>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            let isGenerating = false;
            let audioPreview = new Audio();
            const modal = new bootstrap.Modal(document.getElementById('voiceSelectionModal'));
            
            $('.preview-voice').click(function() {
                const previewUrl = $(this).data('preview-url');
                if (audioPreview.src === previewUrl && !audioPreview.paused) {
                    audioPreview.pause();
                    audioPreview.currentTime = 0;
                    $(this).html('<i class="bi bi-play-circle"></i> Preview');
                } else {
                    audioPreview.pause();
                    $('.preview-voice').html('<i class="bi bi-play-circle"></i> Preview');
                    audioPreview.src = previewUrl;
                    audioPreview.play();
                    $(this).html('<i class="bi bi-stop-circle"></i> Stop');
                }
            });
            
            $('#voiceSelectionModal').on('hidden.bs.modal', function () {
                audioPreview.pause();
                $('.preview-voice').html('<i class="bi bi-play-circle"></i> Preview');
            });
            
            $('#generateAudioBook').click(async function() {
                if (isGenerating) return;
                
                const button = $(this);
                const originalText = button.html();
                const selectedVoiceId = $('input[name="voiceId"]:checked').val();
                isGenerating = true;
                
                button.html('<i class="bi bi-hourglass-split"></i> Generating...');
                button.prop('disabled', true);
                
                try {
                    const response = await fetch(`/Book/GenerateAudioBook/${@Model.Id}?voiceId=${selectedVoiceId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to generate audio book');
                    }
                    
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `${@Json.Serialize(Model.Metadata?.Title ?? "audiobook")}.mp3`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    
                    modal.hide();
                } catch (error) {
                    console.error('Error generating audio book:', error);
                    alert(error.message || 'Failed to generate audio book. Please try again later.');
                } finally {
                    button.html(originalText);
                    button.prop('disabled', false);
                    isGenerating = false;
                }
            });
            
        });
    </script>
}
