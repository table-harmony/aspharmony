@model BusinessLogicLayer.Services.Book
@using Utils

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index">Books</a></li>
        <li class="breadcrumb-item active">@(Model.Metadata?.Title ?? "Unknown") Details</li>
    </ol>
</nav>

<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <h2 class="card-title mb-4">@Model.Metadata?.Title</h2>
                <div class="mt-3">
                    <p><strong>Author:</strong> @(Model.Author?.UserName ?? "Unknown")</p>
                    <p><strong>Description:</strong> @Model.Metadata?.Description</p>
                    <p><strong>Total Chapters:</strong> @(Model.Metadata?.Chapters?.Count ?? 0)</p>
                </div>
                
                <div class="mt-4">
                    @{
                        string userId = User.FindFirstValue(ClaimTypes.NameIdentifier)!;
                        if (Model.AuthorId == userId) {
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                                <i class="bi bi-trash"></i> Delete
                            </a>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#voiceSelectionModal">
                                <i class="bi bi-file-earmark-music"></i> Audio Book
                            </button>
                        }
                    }
                </div>
            </div>
            <div class="col-md-4">
                <img src="@Model.Metadata?.ImageUrl" alt="@Model.Metadata?.Title" class="img-fluid rounded" style="max-height: 300px; width: 100%; object-fit: contain;" />
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="voiceSelectionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Generate Audio book for '@Model.Metadata.Title'</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3" id="voicesContainer">
                    @foreach (var voice in ViewBag.Voices) {
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body d-flex flex-column">
                                    <div class="form-check mb-3">
                                        <input class="form-check-input voice-select" type="radio"
                                               name="voiceId" value="@voice.VoiceId"
                                               id="voice_@voice.VoiceId" @(voice == ViewBag.Voices[0] ? "checked" : "")>
                                        <label class="form-check-label fw-bold" for="voice_@voice.VoiceId">
                                            @voice.Name
                                        </label>
                                    </div>
                                    <ul class="list-unstyled mb-3">
                                        @if (voice.Labels != null) {
                                            @foreach (var label in voice.Labels) {
                                                <li class="badge badge-pill bg-secondary">
                                                    @label.Value
                                                </li>
                                            }
                                        }
                                    </ul>
                                    <button class="btn btn-sm btn-outline-secondary preview-voice mt-auto"
                                            data-preview-url="@voice.PreviewUrl">
                                        <i class="bi bi-play-circle"></i> Preview
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="generateAudioBook">
                    <i class="bi bi-play-circle"></i> <span class="button-text">Generate</span>
                </button>
            </div>
        </div>
    </div>
</div>

@if (Model.Metadata?.Chapters != null && Model.Metadata.Chapters.Any()) {
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Book Content</h3>
        </div>
        <div class="card-body">
            <div class="accordion" id="chaptersAccordion">
                @foreach (var chapter in Model.Metadata.Chapters.OrderBy(c => c.Index)) {
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                                    data-bs-target="#chapter@(chapter.Index)">
                                @chapter.Title
                            </button>
                        </h2>
                        <div id="chapter@(chapter.Index)" class="accordion-collapse collapse" data-bs-parent="#chaptersAccordion">
                            <div class="accordion-body">
                                <p class="mb-0">@chapter.Content</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
} else {
    <div class="alert alert-info">
        <p class="mb-0">No chapters available for this book.</p>
    </div>
}

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Audio Versions</h3>
            <span class="badge bg-primary">@Model.AudioBooks.Count() available</span>
        </div>
        <div class="card-body">
            <div class="row g-3">
                @if (Model.AudioBooks?.Any() == true) {
                    @foreach (var audio in Model.AudioBooks.OrderByDescending(a => a.CreatedAt)) {
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <p class="text-muted small mb-0">
                                            <i class="bi bi-calendar"></i> 
                                            Generated @audio.CreatedAt.ToShortDateString()
                                        </p>
                                        @if (Model.AuthorId == User.FindFirstValue(ClaimTypes.NameIdentifier)!) {
                                            <button class="btn btn-sm btn-outline-danger delete-audio"
                                                    data-audio-id="@audio.Id"
                                                    data-bs-toggle="modal" 
                                                    data-bs-target="#deleteAudioModal">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        }
                                    </div>
                                    <audio controls class="w-100">
                                        <source src="@audio.AudioUrl" type="audio/mpeg">
                                        Your browser does not support the audio element.
                                    </audio>
                                </div>
                            </div>
                        </div>
                    }
                } else {
                    <div class="alert alert-info">
                        <i class="bi bi-exclamation-circle"></i> There are no audio versions for '@Model?.Metadata?.Title'.
                    </div>
                }
            </div>
        </div>
    </div>


<div class="modal fade" id="deleteAudioModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Audio Version</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this audio version? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteAudio">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            const savedPosition = localStorage.getItem('scrollPosition');

            if (savedPosition) {
                const { top, left } = JSON.parse(savedPosition);
                localStorage.removeItem('scrollPosition');
                window.scrollTo(left, top);
            }

            let isGenerating = false;
            let audioPreview = new Audio();
            const modal = new bootstrap.Modal(document.getElementById('voiceSelectionModal'));
            
            $('.preview-voice').click(function() {
                const previewUrl = $(this).data('preview-url');
                const button = $(this);
                
                if (audioPreview.src === previewUrl && !audioPreview.paused) {
                    audioPreview.pause();
                    audioPreview.currentTime = 0;
                    button.html('<i class="bi bi-play-circle"></i> Preview');
                } else {
                    audioPreview.pause();
                    $('.preview-voice').html('<i class="bi bi-play-circle"></i> Preview');
                    audioPreview.src = previewUrl;
                    audioPreview.play();
                    button.html('<i class="bi bi-stop-circle"></i> Stop');
                }
            });
            
            $('#voiceSelectionModal').on('hidden.bs.modal', function () {
                audioPreview.pause();
                $('.preview-voice').html('<i class="bi bi-play-circle"></i> Preview');
            });
            
            $('#generateAudioBook').click(async function() {
                if (isGenerating) return;
                
                const selectedVoiceId = $('input[name="voiceId"]:checked').val();
                if (!selectedVoiceId) {
                    alert('Please select a voice first.');
                    return;
                }
                
                const button = $(this);
                const buttonText = button.find('.button-text');
                const originalText = buttonText.text();
                
                isGenerating = true;
                button.prop('disabled', true);
                buttonText.text('Generating...');
                
                try {
                    const response = await fetch(`/Book/GenerateAudioBook/${@Model.Id}?voiceId=${selectedVoiceId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to generate audio book');
                    }
                   
                    reloadWithoutScroll();
                } catch (error) {
                    console.error('Error generating audio book:', error);
                    alert('Failed to generate audio book. Please try again later.');
                } finally {
                    button.prop('disabled', false);
                    buttonText.text(originalText);
                    isGenerating = false;
                }
            });

            let audioToDelete = null;
            
            $('.delete-audio').click(function() {
                audioToDelete = $(this).data('audio-id');
            });
            
            $('#confirmDeleteAudio').click(async function() {
                if (!audioToDelete) return;
                
                const button = $(this);
                const originalText = button.html();
                button.prop('disabled', true)
                      .html('<i class="bi bi-hourglass-split"></i> Deleting...');
                
                try {
                    const response = await fetch(`/Book/DeleteAudioBook/${audioToDelete}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => null);
                        throw new Error(errorData?.error || 'Failed to delete audio book');
                    }
                    
                   reloadWithoutScroll();
                } catch (error) {
                    console.error('Error deleting audio book:', error);
                    alert(error.message || 'Failed to delete audio book. Please try again later.');
                    button.prop('disabled', false).html(originalText);
                }
            });

            function reloadWithoutScroll() {
                const scrollPosition = { top: window.scrollY, left: window.scrollX };

                localStorage.setItem('scrollPosition', JSON.stringify(scrollPosition));
                window.location.reload();
            }
        });
    </script>
}

<style>
    .card-body {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .preview-voice {
        margin-top: auto;
    }
    
    .badge {
        margin-right: 0.25rem;
        margin-bottom: 0.25rem;
        padding: 0.35em 0.65em;
    }
</style>
