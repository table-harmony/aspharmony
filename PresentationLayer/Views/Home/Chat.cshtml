@{
    ViewData["Title"] = "Chat";
}

<div class="card shadow-lg">
    <div class="card-header bg-gradient-primary text-white">
        <h2 class="mb-0">
            <i class="bi bi-chat-dots"></i> Live Chat
        </h2>
        <p class="text-white-50 mb-0">Connect with other users in real-time</p>
    </div>
    <div class="card-body stylized-background">
        <div id="messagesList" class="mb-4 p-2" style="height: 425px; overflow-y: auto;">
            <!-- Messages will be displayed here -->
        </div>
        
        <div class="border-top pt-3">
            <form id="chatForm" class="d-flex gap-2">
                <div class="flex-grow-1">
                    <div class="input-group">
                        <span class="input-group-text bg-primary text-white">
                            <i class="bi bi-chat-text"></i>
                        </span>
                        <input type="text" id="messageInput" class="form-control" 
                               placeholder="Type your message..." autocomplete="off" required>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary d-flex align-items-center gap-1">
                    <i class="bi bi-send"></i> <span>Send</span>
                </button>
            </form>
        </div>
    </div>
</div>

@{
    string username = User.Identity?.Name ?? "Guest";
}

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        $(document).ready(function() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:7086/chat-hub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.start()
                .then(() => console.log("Connected to chat hub"))
                .catch(err => console.error("Error connecting:", err));

            connection.on("ReceiveMessage", function (message) {
                const messageTime = new Date(message.Timestamp);
                const encodedMsg = $('<div />').text(message.Content).html();
                const encodedUser = $('<div />').text(message.Sender).html();
                
                const isMyMessage = message.Sender === "@username";
                const isSystemMessage = message.Sender === "Server";
    
                const messageElement = $(`
                    <div class="chat-message mb-3 ${isMyMessage ? 'chat-message-mine' : ''} ${isSystemMessage ? 'chat-message-system' : ''}">
                        <div class="d-flex flex-column ${isMyMessage ? 'align-items-start' : 'align-items-end'}">
                            <small class="message-user text-muted mb-1 text-truncate">
                                ${isMyMessage ? 'You' : isSystemMessage ? '' : encodedUser}
                            </small>
                            <div class="chat-bubble p-2 rounded">
                                <div class="message-content">${encodedMsg}</div>
                                <small class="message-time ${!isMyMessage ? 'text-muted' : 'text-light'}">${messageTime.toLocaleTimeString()}</small>
                            </div>
                        </div>
                    </div>
                `);
    
                $("#messagesList").append(messageElement);
                scrollToBottom();
            });

            function sendMessage(content) {
                if (!content)
                    return;

                const message = {
                    Content: content,
                    Sender: "@username"
                };

                connection.invoke("SendMessage", JSON.stringify(message))
                    .catch(err => console.error("Error sending message:", err));
            }
             
            function scrollToBottom() {
                const messagesList = $("#messagesList");

                messagesList.animate({
                    scrollTop: messagesList[0].scrollHeight
                }, 200);
            }

            $("#chatForm").on("submit", (e) => {
                e.preventDefault();

                const message = $("#messageInput").val().trim();
                sendMessage(message);
                $("#messageInput").val("").focus();
            });

            $("#messageInput").on("keypress", (e) => {
                if (e.which !== 13 || e.shiftKey)
                    return;

                e.preventDefault();

                const message = $("#messageInput").val().trim(); 
                sendMessage(message);
                $("#messageInput").val("").focus();
            });
        });
    </script>
    <style>
        .stylized-background {
            background-color: #f8f9fa;
            border-radius: 0.5rem;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .chat-bubble {
            max-width: 80%;
            background: var(--bs-light);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .chat-message-mine .chat-bubble {
            background: linear-gradient(135deg, rgba(13, 110, 253, 0.9), rgba(13, 110, 253, 0.7));
            color: white;
        }

        .chat-message-system .chat-bubble {
            background: rgba(108, 117, 125, 0.1);
            color: var(--bs-gray-600);
            font-style: italic;
        }

        .chat-message-system .message-time {
            display: none;
        }

        .card {
            border-radius: 0.75rem;
            overflow: hidden;
        }

        .card-header {
            background: linear-gradient(135deg, #0d6efd, #6610f2);
        }

        .card-header h2, .card-header p {
            margin: 0;
        }

        #messagesList {
            background: linear-gradient(to bottom, #ffffff, #e9ecef);
        }

        .input-group-text {
            background: var(--bs-primary);
            color: white;
        }

        button.btn-primary {
            background: var(--bs-primary);
            border: none;
            transition: background-color 0.3s ease;
        }

        button.btn-primary:hover {
            background: rgba(13, 110, 253, 0.8);
        }

        .chat-message-mine .chat-bubble .message-time {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.8rem;
            margin-top: 4px;
            display: block;
        }

        .chat-message-mine {
            text-align: left !important;
        }

        .chat-message-mine .chat-bubble .message-content {
            margin-bottom: 2px;
        }

        .chat-message-mine .message-user {
            color: rgba(255, 255, 255, 0.5);
            font-size: 0.9rem;
        }
    </style>
}
