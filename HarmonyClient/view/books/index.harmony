import http from "http"
import json from "json"

import { Book } from "core/book.harmony"

fn get_books() {
  const fetchedBooks = try {
    const response = http.get("http://localhost:7137/api/books", map{
      "headers" -> map{
        "Content-Type" -> "application/json",
      },
    })

    const isSuccess = response["statusCode"] < 300
    if !isSuccess {
      throw error("request has failed")
    }

    json.parse(response["body"])
  } catch err {
    printf(err)
    nil
  }
  
  const books = []Book{}
  for _, book in fetchedBooks {
    books.append(Book.create(book))
  }

  return books
}

fn get_book(id: number) -> Book {
  const fetchedBook = try {
    const fullUrl = "http://localhost:7137/api/books/" + id
    const response = http.get(fullUrl, map{
      "headers" -> map{
        "Content-Type" -> "application/json",
      },
    })

    const isSuccess = response["statusCode"] < 300
    if !isSuccess {
      throw error("request has failed")
    }

    json.parse(response["body"])
  } catch err {
    printf(err)
    nil
  }

  return Book.create(fetchedBook)
}

fn delete_book(id: number) -> bool {
  const isDeleted = try {
    const fullUrl = "http://localhost:7137/api/books/" + id
    const response = http.delete(fullUrl, map{
      "headers" -> map{
        "Content-Type" -> "application/json",
      },
    })

    const isSuccess = response["statusCode"] < 300
    if !isSuccess {
      throw error("request has failed")
    }

    true
  } catch err {
    printf(err)
    false
  }

  return isDeleted
}

fn create_book(book: Book) {
  try {      
    const response = http.post("http://localhost:7137/api/books", map{
      "headers" -> map{
        "Content-Type" -> "application/json",
      },
      "body" -> json.stringify(map{
        "author_id" -> book.author.id,
        "server" -> book.server,
        "metadata" -> book.metadata.to_map(),
      }),
    })

    const isSuccess = response["statusCode"] < 300
    if !isSuccess {
      throw error("request has failed")
    }
    
  } catch err {
    printf(err)
  }
}